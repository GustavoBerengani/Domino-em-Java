#BlueJ class context
comment0.target=DominoFXApp
comment0.text=\r\n\ Classe\ principal\ da\ aplica\u00E7\u00E3o\ de\ jogo\ de\ domin\u00F3\ com\ interface\ gr\u00E1fica\ JavaFX.\r\n\ Gerencia\ a\ interface\ do\ usu\u00E1rio\ (UI),\ a\ l\u00F3gica\ de\ intera\u00E7\u00E3o\ do\ jogador\ e\ o\ fluxo\ do\ jogo.\r\n
comment1.params=stage
comment1.target=void\ start(javafx.stage.Stage)
comment1.text=\r\n\ Ponto\ de\ entrada\ da\ aplica\u00E7\u00E3o\ JavaFX.\r\n\ Inicia\ a\ aplica\u00E7\u00E3o\ exibindo\ o\ menu\ inicial.\r\n\r\n\ @param\ stage\ O\ palco\ principal\ (janela)\ da\ aplica\u00E7\u00E3o.\r\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment10.text=\r\n\ O\ m\u00E9todo\ main,\ ponto\ de\ entrada\ para\ a\ execu\u00E7\u00E3o\ do\ programa\ Java.\r\n\r\n\ @param\ args\ Argumentos\ de\ linha\ de\ comando\ (n\u00E3o\ utilizados).\r\n
comment2.params=stage
comment2.target=void\ mostrarMenuInicial(javafx.stage.Stage)
comment2.text=\r\n\ Exibe\ o\ menu\ inicial\ onde\ o\ jogador\ pode\ escolher\ o\ modo\ de\ jogo.\r\n\ As\ op\u00E7\u00F5es\ s\u00E3o\ Jogador\ vs\ Jogador\ ou\ Jogador\ vs\ CPU.\r\n\r\n\ @param\ stage\ O\ palco\ onde\ a\ cena\ do\ menu\ ser\u00E1\ exibida.\r\n
comment3.params=stage\ vsCPU
comment3.target=void\ iniciarJogo(javafx.stage.Stage,\ boolean)
comment3.text=\r\n\ Inicia\ o\ jogo\ de\ domin\u00F3,\ configurando\ o\ tabuleiro,\ os\ jogadores\ e\ a\ interface\ principal.\r\n\r\n\ @param\ stage\ O\ palco\ principal\ do\ jogo.\r\n\ @param\ vsCPU\ true\ se\ o\ jogo\ for\ contra\ a\ CPU,\ false\ se\ for\ Jogador\ vs\ Jogador.\r\n
comment4.params=
comment4.target=void\ configurarAcoes()
comment4.text=\r\n\ Configura\ os\ manipuladores\ de\ eventos\ (event\ handlers)\ para\ os\ bot\u00F5es\ de\ a\u00E7\u00E3o\ do\ jogo.\r\n
comment5.params=esquerda
comment5.target=void\ tentarJogar(boolean)
comment5.text=\r\n\ Tenta\ realizar\ uma\ jogada\ com\ a\ pe\u00E7a\ selecionada\ pelo\ jogador.\r\n\ Valida\ se\ uma\ pe\u00E7a\ foi\ selecionada\ e\ se\ a\ jogada\ \u00E9\ v\u00E1lida.\r\n\ Se\ a\ jogada\ for\ bem-sucedida,\ verifica\ a\ condi\u00E7\u00E3o\ de\ vit\u00F3ria\ e\ passa\ o\ turno.\r\n\r\n\ @param\ esquerda\ true\ para\ jogar\ \u00E0\ esquerda\ da\ mesa,\ false\ para\ jogar\ \u00E0\ direita.\r\n
comment6.params=
comment6.target=void\ turnoCPU()
comment6.text=\r\n\ Executa\ a\ l\u00F3gica\ de\ jogada\ para\ o\ jogador\ CPU.\r\n\ A\ CPU\ tenta\ jogar\ qualquer\ pe\u00E7a\ v\u00E1lida.\ Se\ n\u00E3o\ puder,\ tenta\ comprar\ uma.\r\n\ Se\ ainda\ n\u00E3o\ puder\ jogar,\ passa\ a\ vez.\r\n
comment7.params=
comment7.target=void\ atualizarUI()
comment7.text=\r\n\ Atualiza\ todos\ os\ componentes\ da\ interface\ gr\u00E1fica\ para\ refletir\ o\ estado\ atual\ do\ jogo.\r\n\ Isso\ inclui\ a\ mesa,\ a\ m\u00E3o\ do\ jogador,\ o\ indicador\ de\ turno\ e\ o\ estado\ dos\ bot\u00F5es.\r\n
comment8.params=peca\ rotacionada
comment8.target=javafx.scene.image.ImageView\ getImagemPeca(jogodomino.PecaDomino,\ boolean)
comment8.text=\r\n\ Carrega\ e\ retorna\ a\ imagem\ de\ uma\ pe\u00E7a\ de\ domin\u00F3\ espec\u00EDfica.\r\n\ O\ m\u00E9todo\ lida\ com\ pe\u00E7as\ com\ n\u00FAmeros\ invertidos\ (ex\:\ 1-2\ e\ 2-1)\ e\ aplica\ rota\u00E7\u00E3o\ opcional.\r\n\r\n\ @param\ peca\ A\ pe\u00E7a\ de\ domin\u00F3\ para\ a\ qual\ a\ imagem\ \u00E9\ necess\u00E1ria.\r\n\ @param\ rotacionada\ Se\ true,\ a\ imagem\ da\ pe\u00E7a\ ser\u00E1\ rotacionada\ em\ 90\ graus.\r\n\ @return\ um\ ImageView\ contendo\ a\ imagem\ da\ pe\u00E7a.\r\n
comment9.params=msg
comment9.target=void\ alert(java.lang.String)
comment9.text=\r\n\ Exibe\ uma\ caixa\ de\ di\u00E1logo\ de\ alerta\ com\ uma\ mensagem\ para\ o\ usu\u00E1rio.\r\n\r\n\ @param\ msg\ A\ mensagem\ a\ ser\ exibida\ no\ alerta.\r\n
numComments=11
